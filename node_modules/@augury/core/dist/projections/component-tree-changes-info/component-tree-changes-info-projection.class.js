import { ComponentLifecycleMethodInvokedEvent } from '../../events/component-lifecycle-method-events';
import { ZoneStabilizedEvent } from '../../events/zone';
import { mergeComponentTrees } from '../../probes/types/component-tree-node';
import { getComponentTypeChangeDetectionFrequency, getLifeCycleChecksPerComponentInstance, } from '../../probes/types/component-tree-node/merged-component-tree-node.functions';
import { EventProjection } from '../event-projection.class';
export class ComponentTreeChangesInfoProjection extends EventProjection {
    constructor(startEventId, endEventId) {
        super();
        this.startEventId = startEventId;
        this.endEventId = endEventId;
        this.result = this.createInitialResultValue();
    }
    process(event) {
        if (event.isInstanceOf(ZoneStabilizedEvent)) {
            const zoneStabilizedEvent = event;
            if (event.id < this.startEventId) {
                this.result.previousComponentTree = zoneStabilizedEvent.componentTree;
            }
            else if (event.id >= this.endEventId) {
                if (this.result.nextComponentTree.length === 0) {
                    this.result.nextComponentTree = zoneStabilizedEvent.componentTree;
                }
                else {
                    return true;
                }
            }
        }
        else if (event.isInstanceOf(ComponentLifecycleMethodInvokedEvent) &&
            event.isIdInRange(this.startEventId, this.endEventId)) {
            this.result.lifeCycleMethodInvokedEvents.push(event);
        }
        return false;
    }
    getResult() {
        const mergedComponentTree = mergeComponentTrees(this.result.previousComponentTree, this.result.nextComponentTree);
        const lifeCycleChecksPerComponentInstance = getLifeCycleChecksPerComponentInstance(mergedComponentTree, this.result.lifeCycleMethodInvokedEvents);
        return {
            mergedComponentTree,
            lifeCycleChecksPerComponentInstance,
            componentTypeChangeDetectionFrequencies: getComponentTypeChangeDetectionFrequency(lifeCycleChecksPerComponentInstance),
        };
    }
    cleanup() {
        this.result = this.createInitialResultValue();
    }
    createInitialResultValue() {
        return {
            previousComponentTree: [],
            nextComponentTree: [],
            lifeCycleMethodInvokedEvents: [],
        };
    }
}
//# sourceMappingURL=component-tree-changes-info-projection.class.js.map