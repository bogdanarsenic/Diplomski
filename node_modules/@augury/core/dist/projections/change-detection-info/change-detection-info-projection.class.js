import { ComponentLifecycleMethodInvokedEvent } from '../../events/component-lifecycle-method-events';
import { EventProjection } from '../event-projection.class';
export class ChangeDetectionInfoProjection extends EventProjection {
    constructor() {
        super(...arguments);
        this.changeDetectionInfo = {
            drag: 0,
        };
        this.numberOfViewChecks = 0;
    }
    process(event) {
        if (event.isInstanceOf(ComponentLifecycleMethodInvokedEvent)) {
            const componentLifecycleMethodInvokedEvent = event;
            this.changeDetectionInfo.drag += event.getAuguryDrag();
            switch (componentLifecycleMethodInvokedEvent.hookMethod) {
                case 'ngDoCheck':
                    if (!this.changeDetectionInfo.componentsChecked) {
                        this.changeDetectionInfo = Object.assign({}, this.changeDetectionInfo, { startEventId: event.id, startTimestamp: event.timePeriod.startTimestamp, componentsChecked: [] });
                    }
                    this.changeDetectionInfo.componentsChecked.push(componentLifecycleMethodInvokedEvent.componentInstance);
                    break;
                case 'ngAfterViewChecked':
                    this.numberOfViewChecks++;
                    this.changeDetectionInfo = Object.assign({}, this.changeDetectionInfo, { endEventId: event.id, endTimestamp: event.timePeriod.endTimestamp });
                    if (this.numberOfViewChecks === this.changeDetectionInfo.componentsChecked.length) {
                        return true;
                    }
            }
        }
        return false;
    }
    getResult() {
        return this.changeDetectionInfo;
    }
    cleanup() {
        this.changeDetectionInfo = {
            drag: 0,
        };
        this.numberOfViewChecks = 0;
    }
}
//# sourceMappingURL=change-detection-info-projection.class.js.map