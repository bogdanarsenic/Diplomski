import { ZoneStabilizedEvent, ZoneUnstabilizedEvent } from '../../events/zone';
import { EventProjection } from '../event-projection.class';
export class InstabilityPeriodInfoProjection extends EventProjection {
    constructor() {
        super(...arguments);
        this.instabilityPeriodInfo = {};
        this.isDuringInstabilityPeriod = false;
    }
    process(event) {
        if (event.isInstanceOf(ZoneUnstabilizedEvent)) {
            this.instabilityPeriodInfo = {
                startEventId: event.id,
                startTimestamp: event.timePeriod.startTimestamp,
                drag: 0,
            };
            this.isDuringInstabilityPeriod = true;
        }
        if (this.isDuringInstabilityPeriod) {
            this.instabilityPeriodInfo.drag = event.getAuguryDrag();
            if (event.isInstanceOf(ZoneStabilizedEvent)) {
                const zoneStabilizedEvent = event;
                this.instabilityPeriodInfo = Object.assign({}, this.instabilityPeriodInfo, { endEventId: event.id, endTimestamp: event.timePeriod.startTimestamp, componentTree: zoneStabilizedEvent.componentTree });
                return true;
            }
        }
        return false;
    }
    getResult() {
        return this.instabilityPeriodInfo;
    }
    cleanup() {
        this.instabilityPeriodInfo = {};
        this.isDuringInstabilityPeriod = false;
    }
}
//# sourceMappingURL=instability-period-info-projection.class.js.map